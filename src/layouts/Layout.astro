---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Personal portfolio website for Ciar√°n Kearney, Mechanical Engineer" } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href={import.meta.env.BASE_URL + "/favicon.svg"} />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>{title}</title>
    <!-- Import global styles -->
    <link rel="stylesheet" href={import.meta.env.BASE_URL + "/styles/global.css"} />
  </head>
  <body>
    <div class="dots-background" id="dots-background"></div>
    <div class="gears-container" id="gears-container"></div>
    <slot />

    <script is:inline>
      // Dots background animation
      class Dot {
        constructor(container) {
          this.x = Math.random() * window.innerWidth;
          this.y = Math.random() * window.innerHeight;
          this.size = Math.random() * 4.5 + 1;
          this.opacity = 0;
          this.fadeSpeed = Math.random() * 0.005 + 0.002;
          this.fadeDirection = 'in';
          this.maxOpacity = Math.random() * 0.45 + 0.15;

          this.element = document.createElement('div');
          this.element.className = 'dot';
          this.element.style.position = 'absolute';
          this.element.style.left = `${this.x}px`;
          this.element.style.top = `${this.y}px`;
          this.element.style.width = `${this.size}px`;
          this.element.style.height = `${this.size}px`;
          this.element.style.borderRadius = '50%';

          const colorChoice = Math.random();
          if (colorChoice > 0.75) {
            this.element.style.background = `rgba(${130 + Math.floor(Math.random() * 40)}, ${120 + Math.floor(Math.random() * 40)}, ${240 + Math.floor(Math.random() * 15)}, 1)`;
          } else if (colorChoice > 0.55) {
            this.element.style.background = `rgba(${100 + Math.floor(Math.random() * 30)}, ${150 + Math.floor(Math.random() * 50)}, ${240 + Math.floor(Math.random() * 15)}, 1)`;
          } else {
            this.element.style.background = '#fff';
          }

          this.element.style.opacity = this.opacity.toString();
          this.element.style.pointerEvents = 'none';
          container.appendChild(this.element);
        }

        update() {
          if (this.fadeDirection === 'in') {
            this.opacity += this.fadeSpeed;
            if (this.opacity >= this.maxOpacity) {
              this.opacity = this.maxOpacity;
              this.fadeDirection = 'out';
            }
          } else {
            this.opacity -= this.fadeSpeed;
            if (this.opacity <= 0) {
              this.opacity = 0;
              this.fadeDirection = 'in';
              this.x = Math.random() * window.innerWidth;
              this.y = Math.random() * window.innerHeight;
              this.element.style.left = `${this.x}px`;
              this.element.style.top = `${this.y}px`;
            }
          }
          this.element.style.opacity = this.opacity.toString();
        }
      }

      function initDotsBackground() {
        let container = document.getElementById('dots-background');
        if (!container) {
          container = document.createElement('div');
          container.id = 'dots-background';
          container.style.position = 'fixed';
          container.style.left = '0';
          container.style.top = '0';
          container.style.width = '100vw';
          container.style.height = '100vh';
          container.style.zIndex = '-1';
          container.style.overflow = 'hidden';
          container.style.pointerEvents = 'none';
          container.style.background = 'transparent';
          document.body.appendChild(container);
        }

        const dots = [];
        const numDots = Math.min(window.innerWidth / 5, 200);

        for (let i = 0; i < numDots; i++) {
          dots.push(new Dot(container));
        }

        function animate() {
          dots.forEach(dot => dot.update());
          requestAnimationFrame(animate);
        }
        animate();
      }

      // Simple Gear Border System
      class GearBorder {
        constructor() {
          this.gears = [];
          this.isReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
          this.init();
        }

        init() {
          this.createGearBorders();
          if (!this.isReducedMotion) {
            this.bindScrollEvents();
          }
        }

        createGearBorders() {
          // Create left border
          this.createBorderGears('left');
          // Create right border
          this.createBorderGears('right');
        }

        createBorderGears(side) {
          const container = document.createElement('div');
          container.className = `gear-border gear-border-${side}`;

          // Calculate how many gears we need based on viewport height
          const gearSize = 24;
          const spacing = 4;
          const totalGearHeight = gearSize + spacing;
          const gearsNeeded = Math.ceil((window.innerHeight + 500) / totalGearHeight); // Extra for scrolling

          for (let i = 0; i < gearsNeeded; i++) {
            const gear = this.createSimpleGear(gearSize, i);
            container.appendChild(gear);
            this.gears.push({
              element: gear,
              index: i,
              side: side,
              speed: (i % 2 === 0) ? 1 : -1, // Alternate rotation direction
              rotation: 0
            });
          }

          document.body.appendChild(container);
        }

        createSimpleGear(size, index) {
          const gear = document.createElement('div');
          gear.className = 'mini-gear';
          gear.style.cssText = `
            width: ${size}px;
            height: ${size}px;
            margin: 4px 0;
            opacity: 0.5;
            transform-origin: center;
          `;

          // Simple CSS-only gear icon
          gear.innerHTML = `
            <svg width="${size}" height="${size}" viewBox="0 0 24 24" fill="none">
              <path d="M12 1L14 7L20 7.5L14 8L12 14L10 8L4 7.5L10 7L12 1Z M12 17L14 19L20 19.5L14 20L12 23L10 20L4 19.5L10 19L12 17Z"
                    fill="rgba(106, 93, 211, 0.7)"
                    stroke="rgba(106, 93, 211, 0.9)"
                    stroke-width="0.5"/>
              <circle cx="12" cy="12" r="4" fill="rgba(15, 30, 64, 0.9)" stroke="rgba(106, 93, 211, 0.8)" stroke-width="1"/>
            </svg>
          `;

          return gear;
        }

        bindScrollEvents() {
          let ticking = false;
          const updateGears = () => {
            const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
            const scrollSpeed = scrollTop * 0.3; // Gentle rotation

            this.gears.forEach((gear) => {
              gear.rotation = scrollSpeed * gear.speed * 0.05;
              gear.element.style.transform = `rotate(${gear.rotation}deg)`;
            });

            ticking = false;
          };

          window.addEventListener('scroll', () => {
            if (!ticking) {
              requestAnimationFrame(updateGears);
              ticking = true;
            }
          }, { passive: true });
        }
      }

      // Mobile menu toggle
      function initMobileMenu() {
        const menuToggle = document.getElementById('menu-toggle');
        const navLinks = document.getElementById('nav-links');

        if (menuToggle && navLinks) {
          menuToggle.addEventListener('click', () => {
            navLinks.classList.toggle('active');
          });

          const links = navLinks.getElementsByTagName('a');
          for (let i = 0; i < links.length; i++) {
            links[i].addEventListener('click', () => {
              navLinks.classList.remove('active');
            });
          }
        }
      }

      // Section animations
      function initSectionAnimations() {
        const sections = document.querySelectorAll('section');
        const options = {
          root: null,
          rootMargin: '0px',
          threshold: 0.1
        };

        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('section-visible');
              observer.unobserve(entry.target);
            }
          });
        }, options);

        sections.forEach(section => {
          section.classList.add('section-animate');
          observer.observe(section);
        });
      }

      document.addEventListener('DOMContentLoaded', () => {
        initDotsBackground();
        initMobileMenu();
        initSectionAnimations();

        // Initialize gear border system
        new GearBorder();
      });
    </script>
  </body>
</html>
